<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.green.spring.dao.BoardDAO">
	<!-- 게시글을 작성하면 DB에 데이터 추가 -->
	<insert id="insertBoard" useGeneratedKeys="true" keyProperty="b.bd_num">
		insert into board(bd_title, bd_content, bd_me_id, bd_ori_num, bd_depth, bd_order)
		<if test="b.bd_ori_num == 0">
			select #{b.bd_title},#{b.bd_content},#{b.bd_me_id}, ifnull(max(bd_num),0) + 1, 1, 1 from board;
		</if>
		<if test="b.bd_ori_num != 0">
			values(#{b.bd_title},#{b.bd_content},#{b.bd_me_id}, #{b.bd_ori_num}, #{b.bd_depth}+1, #{b.bd_order}+1)
		</if>
	</insert>
	
	<!-- 게시글 order 수정 -->
	<update id="updateBoardOrder">
		update board
			set bd_order = bd_order+1 
			where bd_ori_num = #{bo.bd_ori_num} and bd_order > #{bo.bd_order}
	</update>
	
	<!-- 게시글 리스트 정보 가져옴 -->
	<select id="selectBoardList" resultType="kr.green.spring.vo.BoardVO">
		select * from board
			where bd_del = 'N'
			<if test="cri.searchType == 'all'">
			and (bd_title like concat('%',#{cri.search},'%') or bd_me_id like concat('%',#{cri.search},'%'))
			</if> 
			<if test="cri.searchType != 'all'">
			and ${cri.searchType} like concat('%',#{cri.search},'%')
			</if>
			<if test="cri.column != 'bd_num'">
				order by ${cri.column} ${cri.orderBy}
			</if>
			<if test="cri.column == 'bd_num'">
				order by bd_ori_num ${cri.orderBy}, bd_order asc
			</if>
			limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	
	<!-- 게시글을 선택하면 해당글 조회수 증가 -->
	<update id="updateViews">
		update board
			set bd_views = bd_views+1
			where bd_num = #{bd_num}
	</update>
	
	<!-- 게시글을 선택하면 해당글 정보 가져옴 -->
	<select id="selectBoard" resultType="kr.green.spring.vo.BoardVO">
		select * from board where bd_num = #{bd_num}
	</select>
	
	<!-- 게시글 수정 -->
	<update id="updateBoard">
		update board
			set bd_title = #{b.bd_title}, bd_content = #{b.bd_content}, bd_up_date = now()
			where bd_num = #{b.bd_num}
	</update>
	
	<!-- 게시글 삭제 -->
	<update id="deleteBoard">
		update board
			set bd_del = #{bd_del}
			where bd_num = #{bd_num}	
	</update>
	
	<!-- 게시글 개수 가져옴 -->
	<select id="selectTotalCount" resultType="int">
		select count(*) from board
			where bd_del = 'N'
			<if test="cri.searchType == 'all'">
			and (bd_title like concat('%',#{cri.search},'%') or bd_me_id like concat('%',#{cri.search},'%'))
			</if> 
			<if test="cri.searchType != 'all'">
			and ${cri.searchType} like concat('%',#{cri.search},'%')
			</if>
	</select>
	
	<!-- 회원이 게시글에 추천/비추천 상태 가져옴 -->
	<select id="selectLikes" resultType="kr.green.spring.vo.LikesVO">
		select * from likes
			where li_me_id = #{li.li_me_id} and li_bd_num = #{li.li_bd_num}
	</select>
	
	<!-- 회원이 게시글에 처음으로 추천/비추천 눌렀을 때, 상태 정보 추가 -->
	<insert id="insertLikes">
		insert into likes(li_bd_num, li_me_id, li_state)
			values(#{li.li_bd_num},#{li.li_me_id},#{li.li_state})
	</insert>
	
	<!-- 회원이 게시글의 추천/비추천 상태를 바꿀 때 -->
	<update id="updateLikes">
		update likes set li_state = #{li.li_state} where li_num = #{li.li_num}
	</update>
	
	<!-- 게시글의 추천/비추천 정보 수정 -->
	<update id="updateBoardLikes">
		update board 
			set bd_up = (select count(*) from likes where li_bd_num = #{bd_num} and li_state = 1),
		    	bd_down = (select count(*) from likes where li_bd_num = #{bd_num} and li_state = -1)
		  where bd_num = #{bd_num}
	</update>
	
	<!-- 댓글 추가 -->
	<insert id="insertComment">
		insert into comments(co_me_id, co_bd_num, co_content, co_ori_num, co_depth, co_order)
		<if test="co.co_ori_num == 0">
			select #{co.co_me_id},#{co.co_bd_num},#{co.co_content},ifnull(max(co_num),0) + 1, 1, 1 from comments
		</if>
		<if test="co.co_ori_num != 0">
			values(#{co.co_me_id},#{co.co_bd_num},#{co.co_content},#{co.co_ori_num},#{co.co_depth}+1,#{co.co_order}+1)
		</if>	
	</insert>
	
	<!-- 댓글 order 수정 -->
	<update id="updateCommentOrder">
		update comments
			set co_order = co_order+1 
			where co_ori_num = #{co.co_ori_num} and co_order > #{co.co_order}
	</update>
	
	<!-- 댓글 리스트 가져오기 -->
	<select id="selectCommentList" resultType="kr.green.spring.vo.CommentVO">
		select * from comments
			where co_bd_num = #{co_bd_num}
			order by co_ori_num desc, co_order asc
			limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	
	<!-- 게시글의 댓글 개수 가져오기 -->
	<select id="selectTotalCountComment" resultType="int">
		select count(*) from comments where co_bd_num = #{co_bd_num}
	</select>
	
	<!-- 댓글 번호에 맞는 댓글 정보 가져오기 -->
	<select id="selectComment" resultType="kr.green.spring.vo.CommentVO">
		select * from comments where co_num = #{co_num}
	</select>
	
	<!-- 댓글 삭제 -->
	<delete id="deleteComment">
		delete from comments where co_num = #{co_num}
	</delete>
	
	<!-- 댓글 수정 -->
	<update id="updateComment">
		update comments 
			set co_content = #{co.co_content}
			where co_num = #{co.co_num}
	</update>
	
	<!-- 첨부파일 등록 -->
	<insert id="insertFile">
		insert into file(fi_name, fi_ori_name, fi_bd_num)
			values(#{fi.fi_name},#{fi.fi_ori_name},#{fi.fi_bd_num})
	</insert>
	
	<!-- 첨부파일 가져오기 -->
	<select id="selectFileList" resultType="kr.green.spring.vo.FileVO">
		select * from file where fi_bd_num = #{bd_num}
	</select>
	
</mapper>